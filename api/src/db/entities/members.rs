//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "members")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub gender: Option<i16>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub id_number: Option<String>,
    pub birth_date: Option<DateTime>,
    #[sea_orm(column_type = "Text", nullable)]
    pub home_phone_number: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub mobile_phone_number: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub address: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub title: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub line_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub comment: Option<String>,
    pub joined_at: DateTime,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::students::Entity")]
    Students,
    #[sea_orm(has_one = "super::teachers::Entity")]
    Teachers,
}

impl Related<super::students::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Students.def()
    }
}

impl Related<super::teachers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Teachers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
