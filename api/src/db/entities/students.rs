//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "students")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub member_id: Uuid,
    #[sea_orm(column_type = "Text", nullable)]
    pub school_name: Option<String>,
    pub grade: Option<i16>,
    pub night_class: Option<bool>,
    pub is_pg: Option<bool>,
    #[sea_orm(column_type = "Text", nullable)]
    pub pagamo_account: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub family_type: Option<String>,
    pub family_members: Option<i16>,
    #[sea_orm(column_type = "Text", nullable)]
    pub breadwinner: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub occupation: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub subsidy: Option<String>,
    pub home_ownership: Option<i16>,
    pub class_joined_at: DateTime,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attendance_students::Entity")]
    AttendanceStudents,
    #[sea_orm(
        belongs_to = "super::members::Entity",
        from = "Column::MemberId",
        to = "super::members::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Members,
    #[sea_orm(has_many = "super::student_infos::Entity")]
    StudentInfos,
    #[sea_orm(has_many = "super::teacher_assignments::Entity")]
    TeacherAssignments,
}

impl Related<super::attendance_students::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttendanceStudents.def()
    }
}

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Members.def()
    }
}

impl Related<super::student_infos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StudentInfos.def()
    }
}

impl Related<super::teacher_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeacherAssignments.def()
    }
}

impl Related<super::attendance_records::Entity> for Entity {
    fn to() -> RelationDef {
        super::attendance_students::Relation::AttendanceRecords.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::attendance_students::Relation::Students.def().rev())
    }
}

impl Related<super::teachers::Entity> for Entity {
    fn to() -> RelationDef {
        super::teacher_assignments::Relation::Teachers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::teacher_assignments::Relation::Students.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
